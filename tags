!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATTR	Snake.hpp	/^enum ATTR{HEAD=8, BODY, TAIL};$/;"	g
BG	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	e	enum:TYPE
BODY	Snake.hpp	/^enum ATTR{HEAD=8, BODY, TAIL};$/;"	e	enum:ATTR
CC	makefile	/^CC=g++$/;"	m
CFLAGS	makefile	/^CFLAGS = -g -lncurses$/;"	m
Cols	main.hpp	/^    int Cols;$/;"	m	struct:size
DIRECT	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	g
DOWN	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	e	enum:DIRECT
Direction	Snake.hpp	/^        enum DIRECT Direction;$/;"	m	class:Snake	typeref:enum:Snake::DIRECT
FOOD	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	e	enum:TYPE
Food	Food.cpp	/^ Food::Food(){$/;"	f	class:Food
Food	Food.hpp	/^class Food{$/;"	c
HEAD	Snake.hpp	/^enum ATTR{HEAD=8, BODY, TAIL};$/;"	e	enum:ATTR
H_pos	Snake.hpp	/^        Postion H_pos; $/;"	m	class:Snake
INFO	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	e	enum:TYPE
ISLOOP	main.cpp	/^bool   ISLOOP = 1;$/;"	v
ISSTAT	main.cpp	/^bool ISSTAT = 1;$/;"	v
LEFT	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	e	enum:DIRECT
Lines	main.hpp	/^    int Lines;$/;"	m	struct:size
MAX_LENGTH	main.hpp	16;"	d
Measure	main.hpp	/^typedef struct size Measure;$/;"	t	typeref:struct:size
Postion	Snake.hpp	/^typedef std::pair<int, int> Postion;$/;"	t
Postion	main.hpp	/^typedef std::pair<int, int> Postion;$/;"	t
RIGHT	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	e	enum:DIRECT
STAT	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	e	enum:TYPE
Snake	Snake.hpp	/^        Snake(){}$/;"	f	class:Snake
Snake	Snake.hpp	/^        Snake(int x, int y){H_pos.first = x; H_pos.second = y;snake.push_back(H_pos);}$/;"	f	class:Snake
Snake	Snake.hpp	/^class Snake {$/;"	c
Snake_start	Snake.cpp	/^void Snake::Snake_start(){$/;"	f	class:Snake
Stat	Stat.cpp	/^ Stat::Stat(int lines, int cols, int x, int y)$/;"	f	class:Stat
Stat	Stat.cpp	/^Stat::Stat(Postion& l, Measure& m)$/;"	f	class:Stat
Stat	Stat.cpp	/^Stat::Stat(Postion& left_top, Postion& right_down)$/;"	f	class:Stat
Stat	Stat.hpp	/^class Stat{$/;"	c
TAIL	Snake.hpp	/^enum ATTR{HEAD=8, BODY, TAIL};$/;"	e	enum:ATTR
TYPE	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	g
TYPE_B	Snake.hpp	11;"	d
TYPE_FOOD	main.hpp	17;"	d
TYPE_H	Snake.hpp	12;"	d
UP	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	e	enum:DIRECT
WALL	main.hpp	/^enum TYPE { WALL = 1, STAT, INFO, FOOD, BG };$/;"	e	enum:TYPE
Wall	Wall.hpp	/^        Wall(){ horizon_shape = "=" ;}$/;"	f	class:Wall
Wall	Wall.hpp	/^        Wall(const char* s){horizon_shape = s;}$/;"	f	class:Wall
Wall	Wall.hpp	/^class Wall{$/;"	c
Welcome	main.cpp	/^void Welcome(vector<string>& w, vector<string>& op)$/;"	f
_FOOD_HPP	Food.hpp	2;"	d
_MAIN_HPP	main.hpp	2;"	d
_SNACK_HPP	Wall.hpp	2;"	d
_SNAKE_HPP	Snake.hpp	2;"	d
ch	main.cpp	/^int ch;$/;"	v
draw	Food.cpp	/^void Food::draw()$/;"	f	class:Food
draw	Snake.cpp	/^void Snake::draw(){$/;"	f	class:Snake
draw	Wall.cpp	/^void Wall::draw()const{$/;"	f	class:Wall
gen	Food.cpp	/^void Food::gen(){$/;"	f	class:Food
goon	Snake.cpp	/^void Snake::goon(){$/;"	f	class:Snake
grow_go	Snake.cpp	/^void Snake::grow_go(){$/;"	f	class:Snake
horizon_shape	Wall.hpp	/^        const char* horizon_shape;$/;"	m	class:Wall
if_self_eating	Snake.cpp	/^bool Snake::if_self_eating()$/;"	f	class:Snake
ifshow	Stat.hpp	/^    bool ifshow = 1;$/;"	m	class:Stat
is_tran	Wall.hpp	/^        bool is_tran = 1;$/;"	m	class:Wall
ishit	Snake.cpp	/^bool Snake::ishit(){$/;"	f	class:Snake
isout	Stat.cpp	/^bool Stat::isout(Postion& p)$/;"	f	class:Stat
last	Snake.hpp	/^enum DIRECT {UP=0,  LEFT, RIGHT, DOWN, last} ;$/;"	e	enum:DIRECT
lt	Stat.hpp	/^    Postion lt;$/;"	m	class:Stat
main	main.cpp	/^int main(){$/;"	f
measure	Stat.cpp	/^Measure Stat::measure()$/;"	f	class:Stat
nrand	main.cpp	/^int nrand(int n)$/;"	f
op	main.cpp	/^vector<string> op = {$/;"	v
operator ==	Snake.cpp	/^inline bool operator==(const Postion& ps1, const Postion& ps2)$/;"	f
pos	Food.hpp	/^        std::pair<int, int> pos;$/;"	m	class:Food
rand_pos	main.cpp	/^pair<int, int> rand_pos(int xlimit, int ylimit)$/;"	f
rd	Stat.hpp	/^    Postion rd;$/;"	m	class:Stat
score	main.cpp	/^int score = 0;$/;"	v
size	main.hpp	/^struct size{$/;"	s
sk	main.cpp	/^class Snake sk;$/;"	v	typeref:class:Snake
snake	Snake.hpp	/^        std::vector<Postion> snake;$/;"	m	class:Snake
start	main.cpp	/^clock_t start;$/;"	v
stat	Stat.hpp	/^    WINDOW* stat;$/;"	m	class:Stat
stat_draw	Stat.cpp	/^void Stat::stat_draw()$/;"	f	class:Stat
step_counter	Snake.hpp	/^    int step_counter;$/;"	m	class:Snake
trail	Snake.hpp	/^        Postion trail;$/;"	m	class:Snake
update	Food.cpp	/^void Food::update(){$/;"	f	class:Food
velocity	main.cpp	/^useconds_t velocity = 100000;$/;"	v
wel	main.cpp	/^vector<string> wel = {$/;"	v
